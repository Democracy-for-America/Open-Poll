<style>
  body {padding-top: 150px;}
  #active {
    position: relative;
    left: -32px;
    width: 90%; 
    margin: 0 auto;
  }
  #active li {
    margin-bottom: 0px;
    clear: all;
  }
  #active .bar_wrapper {
    display: block; 
    width: 100%;
    height: 60px; 
    margin-left: 66px;
  }
  #active .bar {
    overflow: visible !important;
    font-size: 18px;
    line-height: 60px;
    white-space: pre;  
    min-width: 1px;
    height: 60px;
    background-color: #ACF;
  }
  #active .candidate_row {
    cursor: pointer; 
    height: 72px;
  }
  #active .candidate_icon {
    display: block; 
    height: 60px; 
    width: 60px; 
    border-radius: 10px;
    float: left;
  }
  #active .candidate_row:hover .bar {
    background-color: #FAA;
    color: #600;
  }
  #active .candidate_row:hover .candidate_icon {
    opacity: 0.667;
  }  
  #removed {
    overflow-y: auto !important;
    display: none;
    position: fixed;
    bottom: 0px;
    width: 100%;
    font-size: 12px;
    line-height: 120%;
    height: 86px !important;
    text-align: center;
    background-color: #FFF;
    padding: 12px 0 6px;
    border-top: solid 1px #999;
  }
  #removed .ex_candidate {
    display: inline-block; 
    vertical-align: top; 
    padding-bottom: 12px; 
    opacity: 0.7; 
    cursor: pointer;
  }
  #removed .ex_candidate:hover {
    opacity: 1;
  }
  #removed .hider-btn {
    display: none; 
    width: 124px;
  }
  h3.add-bottom {
    color: #777;
    font-size: 18px;
    line-height: 120%;
    font-weight: normal;
  }
</style>

<!--[if lt IE 9]>
  <style>
    body { padding-top: 0;}
    .add-bottom, #active { display: none !important; }
 </style>
<![endif]-->  

<%= 'Last refreshed: ' + (Rails.cache.read("results/timestamp/#{@poll.id}") || 'JUST NOW').to_s if params[:timestamp] %>

<% cache "results/template/#{@poll.id}", expires_in: 10.minutes do %>
  <% @initial_results = Rails.cache.fetch("results/initial/#{@poll.id}") { @poll.initial_results } %>
  <% @runoff_results = Rails.cache.fetch("results/runoff/#{@poll.id}") { @poll.runoff_results } %>
  <% @timestamp = Rails.cache.fetch("results/timestamp/#{@poll.id}") { Time.now } %>
  <%= render 'cached_results' %>
  <% CacheRefreshJob.perform_later(@poll) %>
<% end %>

eliminated_candidates = [];

function addToEliminatedCandidates(name) {
  if ( $.inArray(name, eliminated_candidates) < 0 ) {
    eliminated_candidates.push(name);
    var target = 'li[data-name="' + name + '"]';
    if (eliminated_candidates.length == 1) {
      $('#removed').slideDown();
    }
    $(target).slideUp(function(){recalculate();});
    var target = '.hider-btn[data-name="' + name + '"]';
    $(target).slideDown();
  }
}

function removeFromEliminatedCandidates(name) {
  var index = $.inArray(name, eliminated_candidates) ;
  if ( index > -1 ) {
    eliminated_candidates.splice(index, 1);
    var target = 'li[data-name="' + name + '"]';
    if (eliminated_candidates.length == 0) {
      $('#removed').slideUp();
    }
    recalculate();
    $(target).slideDown();
    var target = '.hider-btn[data-name="' + name + '"]';
    $(target).slideUp();
  }
}

function recalculate() {
  var new_results = $.extend({}, initial_results);
  for (i = 0; i < runoff_results.length; ++i) {
    var all_elements_contained = true;
    for (j = 0; j < runoff_results[i]['eliminated_candidates'].length; ++j) {
      if ( $.inArray(runoff_results[i]['eliminated_candidates'][j], eliminated_candidates) < 0 ) {
        all_elements_contained = false;
      }
    }
    if (all_elements_contained == true) {
      for (var j in runoff_results[i]['runners_up']) {
        new_results[j] = new_results[j] + runoff_results[i]['runners_up'][j];
      }
    }
  }
  var total = 0;
  var max = 0;
  for (var j in new_results) {
    if ( $.inArray(j, eliminated_candidates) < 0) {
      if (!isNaN(new_results[j])) {total = total + new_results[j];}
      if (new_results[j] > max) {max = new_results[j];}
    }
  }
  for (var j in new_results) {
    var target = '.bar[data-name="' + j + '"]';
    $(target).data('votes', new_results[j]);
    var target = 'li[data-name="' + j + '"]';
    $(target).data('votes', new_results[j]);
    var target = '.value[data-name="' + j + '"]';
    // $(target).html(new_results[j].toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,") + ' votes');
    $(target).html( (100 * new_results[j] / total).toFixed(2) + '%' );
  }

  $('.bar').each(function() {
      $(this).animate({width: (100 * $(this).data('votes') / max) + '%'}, 'slow');
  });

  $('.bar').promise().done(function() {
    var ul = $("ul");
    var li = ul.children("li");

    li.detach().sort(function(a, b) {
      console.log( $(b).data('name') );
      if ( $(b).data('name') == 'OTHER' ) {
        return -1;
      } else if ( $(a).data('name') == 'OTHER' ) {
        return 1;
      } else {
        return $(b).data('votes') - $(a).data('votes');
      }
    });
    ul.append(li);
  });

  // console.log('most votes:' + max);
}
</script>
